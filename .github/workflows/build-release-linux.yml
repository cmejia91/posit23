name: "Positron: Build Linux Releases"

# Callable workflow that builds Positron for Linux
# Note: our releases are now multi-platform, coordinated by build-release.yml
on:
  workflow_call:
    inputs:
      build_number:
        required: false
        description: "The build distance number only, e.g. 123"
        default: ${{ github.sha }}
        type: string
      short_version:
        required: true
        description: "The short version number, including the build distance, e.g. 2023.12.0-123"
        default: ${{ github.sha }}
        type: string
  workflow_dispatch:

jobs:
  build-positron:
    name: Build Positron
    runs-on: unbuntu-latest
    timeout-minutes: 60

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      max-parallel: 1
      matrix:
        arch: [x64]

    steps:
      # Checkout sources
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y vim curl build-essential clang make cmake git r-base-dev python3-pip python-is-python3 libsodium-dev libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1 libnss3 libnspr4 libasound2 libkrb5-dev

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Execute yarn
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          POSITRON_GITHUB_PAT: ${{ secrets.POSITRON_GITHUB_PAT }}
        run: |
          # Install Yarn
          npm install -g yarn

          # Install node-gyp; this is required by some packages, and yarn
          # sometimes fails to automatically install it.
          yarn global add node-gyp

          # Perform the main yarn command; this installs all Node packages and
          # dependencies
          yarn --immutable --network-timeout 120000

      - name: Build Positron
        env:
          POSITRON_BUILD_NUMBER: ${{ inputs.build_number }}
        run: |
          yarn gulp vscode-linux-${{ matrix.arch }}

  build-binaries:
    name: Create .deb and .rpm binaries
    needs: [build-positron]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      max-parallel: 1
      matrix:
        arch: [x64]
        pack: [deb, rpm]
    steps:
      - name: Prepare binary
        run: |
          yarn gulp vscode-linux-${{ matrix.arch }}-prepare-${{ matrix.pack }}

      # There is only .deb or .rpm file generated by the gulp "build"
      # step. The `*` globs in the `mv` command will match a single
      # file and are just a convenient way of matching the generated
      # filename.
      - name: Build binary
        run: |
          yarn gulp vscode-linux-${{ matrix.arch }}-build-${{ matrix.pack }}
          mv .build/linux/${{ matrix.pack }}/*/${{ matrix.pack }}/*.${{ matrix.pack }} Positron-${{ inputs.short_version }}.${{ matrix.pack }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: positron-${{ matrix.pack }}-binary
          path: Positron-${{ inputs.short_version }}.${{ matrix.pack }}

  status:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Notify slack if build fails
        uses: slackapi/slack-github-action@v1.24.0
        id: slack-failure
        with:
          payload: |
            {
              "message": "Positron Linux build ${{ inputs.build_number }} failed",
              "status": "Failure",
              "run_url": "https://github.com/posit-dev/positron/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
