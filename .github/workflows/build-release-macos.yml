name: Build macOS Release

on: workflow_dispatch

jobs:

  version_string:
    name: Determine version
    runs-on: self-hosted
    outputs:
      short_version: ${{ steps.short_version.outputs.result }}
      build_number: ${{ steps.build_number.outputs.result }}
    steps:
      # Fetch full history; required so we can determine the build version with rev-list
      - name: Checkout Sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Node 16
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Call version script to determine short version. This is the version
      # string that we will use later to form the file name of the release
      # artifact.
      #
      # Example: 2022.10.0-123
      - name: Determine Version (Short)
        id: short_version
        run: echo "result=$(./versions/show-version.js --short)" >> $GITHUB_OUTPUT

      # Call again to get just the build number. Example: 123
      - name: Determine Version (Build Number)
        id: build_number
        run: echo "result=$(./versions/show-version.js --build)" >> $GITHUB_OUTPUT


  macos-arm64:
    name: Build macOS Client (arm64)
    needs: version_string
    runs-on: [self-hosted, macos, arm64]
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3

      # Perform initial (arm64) dependency download/install
      - name: Install Dependencies (arm64)
        run: yarn

      # Build client for arm64
      - name: Build Client (arm64)
        run: yarn gulp vscode-darwin-arm64
        env:
          POSITRON_BUILD_NUMBER: ${{ needs.version_string.outputs.build_number }}

      # Compress arm64 client to a zip file
      - name: Create arm64 Client Archive
        run: |
          cd ..
          zip -Xry positron-${{ needs.version_string.outputs.short_version }}-darwin-arm64.zip VSCode-darwin-arm64

      # Create build artifact
      - name: Upload arm64 Client Arachive
        uses: actions/upload-artifact@v3
        with:
          name: positron-darwin-arm64-archive
          path: ../positron-${{ needs.version_string.outputs.short_version }}-darwin-arm64.zip

  macos-x64:
    name: Build macOS Client (x64)
    runs-on: [self-hosted, macos, arm64]
    needs: version-string
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3

      # Reinstall node_modules binaries for x64
      - name: Install Dependencies (x64)
        env:
          npm_config_arch: x64
        run: yarn

      # Build client for x64
      - name: Build Client (x64)
        run: yarn gulp vscode-darwin-x64
        env:
          POSITRON_BUILD_NUMBER: ${{ needs.version_string.outputs.build_number }}

      # Compress arm64 client to a zip file
      - name: Create x64 Client Archive
        run: |
          pushd ..
          zip -Xry positron-${{ needs.version_string.outputs.short_version }}-darwin-x64.zip VSCode-darwin-x64
          popd

      # Create build artifact
      - name: Upload x64 Client Arachive
        uses: actions/upload-artifact@v3
        with:
          name: positron-darwin-x64-archive
          path: ../positron-${{ needs.version_string.outputs.short_version }}-darwin-x64.zip


  macos-universal:
    name: Create macOS Universal Binary
    needs: [macos-arm64, macos-x64]
    runs-on: [self-hosted, macos, arm64]
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Download arm64 and x64 binaries
      - name: Download arm64 client
        uses: actions/download-artifact@v3
        with:
          name: positron-darwin-arm64-archive

      - name: Download x64 client
        uses: actions/download-artifact@v3
        with:
          name: positron-darwin-x64-archive

      # Expand client archives produced in previous workflow steps
      - name: Expand client archives
        run: |
          unzip positron-${{ needs.version_string.outputs.short_version }}-darwin-arm64.zip
          unzip positron-${{ needs.version_string.outputs.short_version }}-darwin-x64.zip

      # Glue together the arm64 and x64 binaries with lipo to create a
      # universal build
      - name: Create universal build
        env:
           VSCODE_ARCH: universal
           DEBUG: "*"
        run: |
          export AGENT_BUILDDIRECTORY=$(pwd)
          node build/darwin/create-universal-app.js

      - name: Run Unit Tests
        id: electron-unit-tests
        run: DISPLAY=:10 ./scripts/test.sh

      - name: Run Integration Tests (Electron)
        id: electron-integration-tests
        run: DISPLAY=:10 ./scripts/test-integration.sh

