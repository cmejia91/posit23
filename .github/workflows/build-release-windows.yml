name: "Positron: Build Windows Release"

on:
  push:
    branches:
      - "win32-x64-build"

jobs:
  version_string:
    name: Determine version
    runs-on: ubuntu-latest
    outputs:
      short_version: ${{ steps.short_version.outputs.result }}
      build_number: ${{ steps.build_number.outputs.result }}
    steps:
      # Fetch full history; required so we can determine the build version with rev-list
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node (used by show-version.js)
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      # Call version script to determine short version. This is the version
      # string that we will use later to form the file name of the release
      # artifact.
      #
      # Example: 2022.10.0-123
      - name: Determine Version (Short)
        id: short_version
        run: |
          result=`./versions/show-version.js --short`
          echo "result=$result" >> $GITHUB_OUTPUT

      # If we're on main, we will be producing a release later, so make sure
      # that no release is already in place with this tag
      - name: Check for Existing Tag
        id: tag_check
        if: github.ref == 'refs/heads/main'
        run: |
          result=`./versions/show-version.js --short`
          git fetch --tags
          tag_exists=`git tag -l "${result}"`
          if [ -n "${tag_exists}" ]; then exit 78; fi

      # Call again to get just the build number. Example: 123
      - name: Determine Version (Build Number)
        id: build_number
        run: echo "result=$(./versions/show-version.js --build)" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows
    runs-on:
      labels: [windows-latest-8x]
    needs: [version_string]
    timeout-minutes: 90

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      max-parallel: 1
      matrix:
        platform: [win32]
        arch: [x64]
        target: [system]
        include:
          - arch: x64
          - target: system

    steps:
      # Checkout sources
      - name: Checkout sources
        uses: actions/checkout@v4

      # Set up Node
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      # Run yarn to install node_modules dependencies
      - name: Install dependencies
        env:
          npm_config_arch: ${{ matrix.arch }}
          POSITRON_GITHUB_PAT: ${{ secrets.POSITRON_GITHUB_PAT }}
        shell: pwsh
        # nvm on windows does not see .nvmrc
        run: |
          yarn --network-timeout 120000

      # Build client
      - name: Build client
        env:
          POSITRON_BUILD_NUMBER: ${{ needs.version_string.outputs.build_number }}
        shell: pwsh
        run: |
          yarn gulp vscode-${{ matrix.platform }}-${{ matrix.arch }}

      # Build setup installer
      - name: Build setup installer
        env:
          POSITRON_BUILD_NUMBER: ${{ needs.version_string.outputs.build_number }}
        shell: pwsh
        run: |
          yarn gulp vscode-${{ matrix.platform }}-${{ matrix.arch }}-inno-updater
          yarn gulp vscode-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-setup

      # Code sign binary
      - name: Code sign setup installer
        env:
          CODESIGN_BASE64: ${{ secrets.TEST_WIN_CODESIGN_BASE64 }}
          CODESIGN_PASSWORD: ${{ secrets.TEST_WIN_CODESIGN_PASSWORD }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path certificates
          Set-Content -Path certificates\codesign.txt -Value $env:CODESIGN_BASE64
          certutil -decode certificates\codesign.txt certificates\codesign.pfx

          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe' sign /fd SHA256 /p $env:CODESIGN_PASSWORD /f certificates\codesign.pfx .build\${{ matrix.platform }}-${{ matrix.arch }}\${{ matrix.target }}-setup\PositronSetup.exe

      # Clean-up after signing
      - name: Clean up
        if: always()
        shell: pwsh
        run: |
          if (Test-Path certificates) { Remove-Item -Force -Recurse certificates }

      # Create build artifact
      - name: Upload client archive
        uses: actions/upload-artifact@v3
        with:
          name: positron-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-setup.exe
          path: .build\${{ matrix.platform }}-${{ matrix.arch }}\${{ matrix.target }}-setup\PositronSetup.exe
