/*---------------------------------------------------------------------------------------------
 *  Copyright (c) RStudio, PBC.
 *--------------------------------------------------------------------------------------------*/

import { Disposable } from 'vs/base/common/lifecycle';
import { editorErrorBackground, editorErrorForeground } from 'vs/platform/theme/common/colorRegistry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ReplError } from 'vs/workbench/contrib/repl/browser/replError';

/**
 * Represents the output generated by a single code execution in a REPL cell.
 */
export class ReplOutput extends Disposable {
	private readonly _container: HTMLElement;

	constructor(
		private readonly _parentElement: HTMLElement,
		@IThemeService private readonly _themeService: IThemeService,
		@IInstantiationService private readonly _instantiationService: IInstantiationService) {
		super();

		// Create our root output container
		this._container = document.createElement('div');
		this._container.classList.add('repl-output');
		this._parentElement.appendChild(this._container);
	}

	/**
	 * Emits preformatted text to the output area.
	 *
	 * @param output The output to emit
	 */
	emitOutput(output: string, error: boolean | undefined) {
		const pre = document.createElement('pre');
		pre.innerText = output;

		// Apply error color to errors. Gosh, it'd sure be nice if this was a
		// CSS class we could just add.
		if (error) {
			const errorColor = this._themeService.getColorTheme().getColor(editorErrorForeground);
			if (errorColor) {
				pre.style.color = errorColor.toString();
			}
		}

		this._container.appendChild(pre);
	}

	/**
	 * Emits preformatted input to the output area.
	 *
	 * @param input The input to emit
	 */
	emitInput(input: string) {
		const pre = document.createElement('pre');
		pre.innerText = `>  ${input}`;
		pre.classList.add('repl-input');
		this._container.appendChild(pre);
	}

	/**
	 * Emits an error to the output stream.
	 *
	 * @param error The error to emit; expected to be an Error JSON object, but
	 * if not will be treated as text
	 */
	emitError(error: string) {
		const err: ReplError = this._instantiationService.createInstance(ReplError, error);
		this._register(err);
		const errorColor = this._themeService.getColorTheme().getColor(editorErrorForeground);
		if (errorColor) {
			err.getDomNode().style.color = errorColor.toString();
		}
		const errorBg = this._themeService.getColorTheme().getColor(editorErrorBackground);
		if (errorBg) {
			err.getDomNode().style.backgroundColor = errorBg.toString();
		}
		err.render(this._container);
	}

	/**
	 * Emit raw HTML to the output stream.
	 *
	 * @param html The raw HTML to emit
	 */
	emitHtml(html: string) {
		const container = document.createElement('div');
		container.innerHTML = html;
		this._container.appendChild(container);
	}

	/**
	 * Get the DOM element containing the outputs
	 *
	 * @returns The containing DOM element
	 */
	getDomNode(): HTMLElement {
		return this._container;
	}
}
